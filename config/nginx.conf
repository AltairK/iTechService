worker_processes 1; # Более одного рабочего процесса обычно не требуется.
user itech staff; # Пользователь с правами которого запускается worker - он же пользователь, от которого осуществляется деплой.

pid /tmp/nginx.pid; # Задаем местоположение файла с идентификатором текущего мастер-процесса Nginx.
error_log /tmp/nginx.error.log; 

events {
    worker_connections 1024; # Стандартный показатель количества одновременно открытых соединений рабочего процесса.
    accept_mutex off; # Ну и раз уж воркер у нас один - отключаем.
}

http {
  # Дальше немного стандартных директив - если нет особого желания менять здесь что-то - не меняйте:
  include mime.types;
  default_type application/octet-stream;
  access_log /tmp/nginx.access.log combined;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay off;
  gzip on;
  
  # Теперь самая сладкая часть. Далее происходит указание upstream сервера. Так как все происходит в рамках одной машины, слушать апстрим лучше через сокет.
  upstream unicorn {
   server unix:/tmp/unicorn.itech_service.sock fail_timeout=0; # Местоположение сокета должно совпадать с настройками файла config/unicorn.rb от корня вашего приложения.
  }

  server {
    listen 80 default_server; # Опять же, если на одном и том же ip находится несколько серверов, то эта строка будет выглядеть как-то так myapp.mydomain.ru:80
    listen 8000;
    listen 8080;
    client_max_body_size 1G; # Максимальный размер тела запроса (а простым языком - ограничение на размер заливаемого на сервер файла).
    server_name localhost; # Имя сервера
    keepalive_timeout 5;
    root /Users/itech/sites/itech_service/public; # Эта строка всегда должна указывать в директорию public Rails приложения. А current там потому что деплой происходит через Capistrano

    try_files $uri/index.html $uri.html $uri @unicorn; # Имя переменной не важно - главное, чтобы в блоке location ниже было аналогичное
    
    location @unicorn {
        proxy_pass http://unicorn; # Часть после http:// должна полностью соответствовать имени в блоке upstream выше.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
    }
    
    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /Users/itech/sites/itech_service/public;
    }
  }
}
