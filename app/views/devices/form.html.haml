= auto_header_tag @device
#client_form_place.well.well-small
= simple_form_for @device, html: { class: 'form-horizontal device_form' } do |f|

  = f.full_error :ticket_number

  - if can? :update, @device
    = f.input :client_id, as: :client, wrapper_html: {id: 'client_fields'}
  - else
    = f.input :client, as: :string, disabled: true, input_html: {class: 'input-xlarge'}

  - if @device.persisted? and @device.client.contact_phone.present?
    .control-group
      = label_tag 'contact_phone', Client.human_attribute_name(:contact_phone), class: 'control-label'
      .controls
        = text_field_tag 'contact_phone', human_phone(@device.client.contact_phone), class: 'input-medium', disabled: true

  - if can? :update, @device
    = f.input :device_type, as: :device_type
    = f.hidden_field :item_id
  - else
    = f.input :device_type, as: :string, disabled: true, input_html: {class: 'input-xlarge'}

  = f.input :security_code, as: :security_code

  = f.input :imei, as: :imei, wrapper_html: {class: @device.has_imei? ? 'imei_input' : 'imei_input hidden'}

  = f.input :serial_number, as: :serial_number, input_html: {autocomplete: 'off'}, required: true

  - if @device.new_record? or @device.user_id == current_user.id
    = f.input :app_store_pass, required: @device.new_record?

  = f.input :comment, input_html: {rows: 5}, disabled: cannot?(:update, @device)

  = f.input :tech_notice, input_html: {rows: 5} if can? :write_tech_notice, @device

  = f.input :notify_client if @device.new_record? or current_user.any_admin?
  = f.input :client_notified, as: :radio_buttons, collection: [[true, t('yep')], [false, t('not_accessible')]], required: true, value_method: :first, label_method: :last if @device.notify_client?

  = f.input :replaced, as: :replaced, disabled: true

  - if can? :update, @device
    = f.input :location_id, as: :location, user: current_user
  - else
    = text_field_tag :location, @device.location.try(:full_name), disabled: true, class: 'input-xlarge'

  = f.input :return_at, as: :my_datetime

  -if f.error(:device_tasks).present?
    .control-group.required.error
      .controls
        %p= f.full_error :device_tasks, class: 'text-error'
        %p
          %span.help-inline.text-error= f.object.device_tasks.map{|dt|dt.errors.full_messages}.join ', '

  = render @device.new_record? ? 'device_tasks_fields' : 'device_tasks', f: f

  .form-actions
    = submit_button f
